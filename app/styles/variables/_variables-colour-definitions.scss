@function color-yiq($color) {
  $r: red($color);
  $g: green($color);
  $b: blue($color);

  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;

  @if ($yiq >= $yiq-contrasted-threshold) {
    @return $yiq-text-dark;
  } @else {
    @return $yiq-text-light;
  }
}

// Retrieve color Sass maps
@function color($key: "blue") {
  @return map-get($colors, $key);
}

@function theme-color($key: "primary") {
  @return map-get($theme-colors, $key);
}

// Request a theme color level
@function theme-color-level($color-name: "primary", $level: 0) {
  $color: theme-color($color-name);
  $color-base: if($level > 0, #000, #fff);
  $level: abs($level);

  @return mix($color-base, $color, $level * $theme-color-interval);
}

$app-colour-shade-one:   red !default;
$app-colour-shade-two:   orange !default;
$app-colour-shade-three: #bbb !default;
$app-colour-shade-four:  green !default;

$blue:        #007bff !default;
$indigo:      #6610f2 !default;
$purple:      #6f42c1 !default;
$pink:        #e83e8c !default;
$red:         #dc3545 !default;
$orange:      #fd7e14 !default;
$yellow:      #ffc107 !default;
$green:       #28a745 !default;
$teal:        #20c997 !default;
$cyan:        #17a2b8 !default;
$gray-light:  #cccccc !default;
$gray-medium: #999999 !default;
$gray-dark:   #333333 !default;

$primary:     $blue !default;
$secondary:   $gray-medium !default;
$success:     $green !default;
$info:        $cyan !default;
$warning:     $yellow !default;
$danger:      $red !default;
$light:       $gray-light !default;
$dark:        $gray-dark !default;

$theme-colors: () !default;
$theme-colors: map-merge((
  "primary":    $primary,
  "secondary":  $secondary,
  "success":    $success,
  "info":       $info,
  "warning":    $warning,
  "danger":     $danger,
  "light":      $light,
  "dark":       $dark
), $theme-colors);

// Set a specific jump point for requesting color jumps
$theme-color-interval:      8% !default;
// The yiq lightness value that determines when the lightness of color changes from "dark" to "light". Acceptable values are between 0 and 255.
$yiq-contrasted-threshold: 160 !default;
// Customize the light and dark text colors for use in our YIQ color contrast function.
$yiq-text-dark: #222 !default;
$yiq-text-light: #fff !default;

// Alerts
@mixin alert-variant($background, $border, $color) {
  color: $color;
  background: $background;
  border-color: $border;
  hr {
    border-top-color: darken($border, 5%);
  }
  .alert-link {
    color: darken($color, 10%);
  }
  .close svg {
    fill: $color;
  }
}

// Background
@mixin bg-variant($parent, $color) {
  #{$parent} {
    background-color: $color !important;
  }
  a#{$parent},
  button#{$parent} {
    &:hover,
    &:focus {
      background-color: darken($color, 10%) !important;
    }
  }
}

// Badge
@mixin badge-variant($bg) {
  color: color-yiq($bg);
  background-color: $bg;

  &[href] {
    &:hover,
    &:focus {
      color: color-yiq($bg);
      text-decoration: none;
      background-color: darken($bg, 10%);
    }
  }
}

// Text
@mixin text-emphasis-variant($parent, $color) {
  #{$parent} {
    color: $color !important;
  }
  a#{$parent} {
    &:hover,
    &:focus {
      color: darken($color, 10%) !important;
    }
  }
}

// List groups
@mixin list-group-item-variant($state, $background, $color) {
  .list-group-item-#{$state} {
    color: $color;
    background-color: $background;
    border-color: darken($background, 20%);
    &.list-group-item-action {
      &:hover,
      &:focus {
        color: darken($color, 15%);
        background-color: darken($background, 10%);
      }

      &.active,
      &:active {
        color: #fff;
        background-color: lighten($color, 5%);
        border-color: darken($color, 10%);
      }
      &.disabled,
      &:disabled {
        color: $list-group-disabled-color;
        background-color: $list-group-disabled-bg;
        border-color: darken($list-group-disabled-bg, 10%);
      }
    }
  }
}

// Button variants
@mixin button-variant($background, $hover-background: darken($background, 15%)) {
  color: color-yiq($background);
  background: $background;
  border-color: $background;
  svg {
      fill: color-yiq($background);
    }
  &:hover {
    background: $hover-background;
    border-color:$hover-background;
  }
  &:focus, &.focus {
    background: $hover-background;
    border-color:$hover-background;
    box-shadow: 0 0 0 3px rgba($background, .5);
  }
  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    color: color-yiq($background);
    background-color: $background;
    border-color: $background;
  }
}

@mixin button-outline-variant($color, $color-hover: color-yiq($color), $active-background: $color, $active-border: $color) {
  color: $color;
  background-color: transparent;
  background-image: none;
  border-color: $color;
  &:hover {
    color: $color-hover;
    background-color: $active-background;
    border-color: $active-border;
    svg {
      fill: $color-hover;
    }
  }
  &:focus, &.focus {
    box-shadow: 0 0 0 3px rgba($color, .5);
  }
  &.disabled,
  &:disabled {
    color: $color;
    background-color: transparent;
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    color: color-yiq($active-background);
    background-color: $active-background;
    border-color: $active-border;
    &:focus {

    }
  }
  svg {
    fill: $color;
  }
}

